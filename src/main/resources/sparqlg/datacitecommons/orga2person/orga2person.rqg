PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
PREFIX vivo: <http://vivoweb.org/ontology/core#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>

GENERATE  <orga2person>(?ror, ?after) {

### map organization data
    GENERATE <https://projects.tib.eu/tapir/datacitecommons/organization/orga_mapping.rqg>( ?orga_data ) .


### map person data
### and for every person: create a connection to organization
    GENERATE {
        GENERATE <https://projects.tib.eu/tapir/datacitecommons/person/person_mapping.rqg>( ?person_data ) .

        GENERATE <https://projects.tib.eu/tapir/vivo-rdf/position.rqg>(?person_id, ?orga_id, ?role, ?start_date, ?end_date) .
    }
    ITERATOR iter:JSONPath(?orga_data, '$.people.nodes[*]') AS ?person_data
    WHERE{
        BIND(<https://projects.tib.eu/tapir/datacitecommons/organization/orga_id.rqg>(?orga_data) AS ?orga_id)
        BIND(<https://projects.tib.eu/tapir/datacitecommons/person/person_id.rqg>(?person_data) AS ?person_id)
    } .


############################# call this query again if hasNextPage =true  #############################################
    GENERATE{
      GENERATE <https://projects.tib.eu/tapir/datacitecommons/orga2person/orga2person.rqg>( ?ror, ?cursor ) .
    }
    WHERE{
      BIND(fun:JSONPath(?orga_data, '$.people.pageInfo.hasNextPage' ) AS ?hasNextPage)
      BIND(fun:JSONPath(?orga_data, '$.people.pageInfo.endCursor' ) AS ?endCursor)
      BIND(IF(STR(?hasNextPage)="true", ?endCursor, ?undef) AS ?cursor )
      FILTER( BOUND(?cursor) ).
     }.
}
SOURCE <https://projects.tib.eu/tapir/datacitecommons/orga2person/documentset/orga2person.graphql> AS ?graphqlquery
WHERE {
    # replace whitespace in graphql query (compress message)
    BIND(REPLACE(?graphqlquery, "\\s+", " ") AS ?graphql)
    BIND(IF(BOUND(?after), ?after, "") AS ?after)
    BIND ("""\{"variables":\{"ror":"{?ror}", "after":"{?after}"},"query":"{?graphql}"}""" AS ?postbody)

    # build http post request
    BIND(  fun:HTTPPost(<https://api.datacite.org/graphql>, "Content-type: application/json" , ?postbody) AS ?response )
    FILTER( fun:HTTPExtractResponseCode( ?response ) = 200 )
    BIND( fun:HTTPExtractBody( ?response ) AS ?body )
    BIND( fun:JSONPath( ?body, "$.data.organization" ) AS ?orga_data )
}
